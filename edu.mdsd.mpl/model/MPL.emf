@namespace(uri="http://mdsd.edu/mpl/1.0", prefix="mpl")
package mpl;

class MPLModel {
  val Program[1] program;
  val Operation[*] operations;
}

abstract class FunctionalUnit {
  attr String[1] name;
  val VariableDeclaration[*] variableDeclarations;
  val Block body;
}

class Program extends FunctionalUnit {
}

class VariableDeclaration {
  val Variable[1] variable;
  val Expression initialValue;
}

class Block {
  val Statement[*] statements;
}

class Variable {
  attr String[1] name;
}

class Statement {
  val Form[1] form;
}

abstract class Form {
}

class Assignment extends Form {
  val VariableReference[1] leftHandSide;
  val Expression[1] rightHandSide;
}

class ExpressionStatement extends Form {
  val Expression[1] expression;
}

abstract class Expression {
}

abstract class AtomicExpression extends Expression {
}

class LiteralValue extends AtomicExpression {
  attr int[1] rawValue;
}

class VariableReference extends AtomicExpression {
  ref Variable[1] variable;
}

abstract class ArithmeticExpression extends Expression {
  val Expression[1] operand1;
  val Expression[1] operand2;
}

class AddExpression extends ArithmeticExpression {
}

class SubtractExpression extends ArithmeticExpression {
}

class MultiplyExpression extends ArithmeticExpression {
}

class DivisionExpression extends ArithmeticExpression {
}

abstract class UnaryExpression extends Expression {
  val Expression[1] operand;
}

class NegateExpression extends UnaryExpression {
}

class ParenExpression extends UnaryExpression {
}

class Comparison {
  val Expression[1] leftHandSide;
  val ComparisonOperator[1] operator;
  val Expression[1] rightHandSide;
}

abstract class ComparisonOperator {
}

class EQ extends ComparisonOperator {
}

class NE extends ComparisonOperator {
}

class GT extends ComparisonOperator {
}

class LT extends ComparisonOperator {
}

class GE extends ComparisonOperator {
}

class LE extends ComparisonOperator {
}

class If extends Form {
  val Comparison[1] condition;
  val Block[1] then;
  val Block else;
}

abstract class Loop extends Form {
  val Block[1] body;
}

class While extends Loop {
  val Comparison[1] condition;
}

class For extends Loop {
  val Assignment[1] from;
  attr Boolean[1] downwards;
  val Expression[1] to;
}

abstract class Operation extends FunctionalUnit {
  val Variable[*] parameters;
}

class Function extends Operation {
}

class Procedure extends Operation {
}

class Return extends Form {
  val Expression value;
}

class OperationExpression extends Expression {
  ref Operation[1] operation;
  val Expression[*] parameterValues;
}

class TraceCall extends Form {
  val VariableReference[1] variable;
}

